buildscript {
    repositories {
        maven { url 'http://download.crashlytics.com/maven' }
        maven { url 'http://download.crashlytics.com/maven' }

    }

    dependencies {
        classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:1.+'
        classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:1.+'

    }
}

apply plugin: 'android'
apply plugin: 'crashlytics'
repositories {
    maven { url 'http://download.crashlytics.com/maven' }
}

apply plugin: 'pmd'
apply plugin: 'findbugs'

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.1"

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"

        buildConfigField "boolean", "FAKE_DATA", "false"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:+'
    compile 'com.squareup.picasso:picasso:2.2.0'
    compile 'com.nineoldandroids:library:2.4.0'
    compile 'com.netflix.rxjava:rxjava-android:0.16.1'
    compile 'com.jakewharton:butterknife:4.0.1'
    compile 'com.squareup.retrofit:retrofit:1.4.1'
    compile 'com.etsy.android.grid:library:1.0.3'
    compile 'com.google.android.gms:play-services:3.2.+'
    compile project(':paralloidviews')
    compile fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    compile 'com.crashlytics.android:crashlytics:1.+'
}

pmd {
    toolVersion = '5.1.0'
}

findbugs {
    toolVersion = "2.0.3"
}

def compilePath = project.configurations.compile.asPath
if (compilePath.contains(File.pathSeparator)) {
    compilePath = compilePath.split(File.pathSeparator)
} else if (compilePath.isEmpty()) {
    compilePath = android.sourceSets.main.java.srcDirs
}

task findbugs(type: FindBugs) {
    excludeFilter file('config/findbugs/exclude.xml')
    classes = fileTree('build/classes/release')
    source = fileTree('src/main/java')
    println compilePath.toString()
    classpath = files()
    effort = 'max'
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task pmd(type: Pmd) {
    ruleSets = ["java-android",
                "java-basic",
                "java-braces",
                "java-strings",
                "java-unnecessary",
                "java-unusedcode",
                "java-sunsecure"]
    source = fileTree('src/main/java')
}

task findbugsWrapper(dependsOn: 'findbugs') {}
task pmdWrapper(dependsOn: 'pmd') {}

check.dependsOn findbugsWrapper
check.dependsOn pmdWrapper