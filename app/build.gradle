apply plugin: 'android'
apply plugin: 'io.fabric'
apply plugin: 'android-apt'
apply plugin: 'pmd'
apply plugin: 'findbugs'

def getAndroidAppVersionCode() {
  return 'git rev-list HEAD --count'.execute().text.trim().toInteger()
}

android {
  compileSdkVersion 21
  buildToolsVersion "21.1.1"

  defaultConfig {
    applicationId "com.leexplorer.app"
    minSdkVersion 10
    targetSdkVersion 21
    versionCode getAndroidAppVersionCode()
    versionName "1.0.1"

    buildConfigField "boolean", "FAKE_DATA", "false"

    //specify "staging" or "production" to use a different backend
    //if set to "", the BuildConfig.DEBUG flag will be used to determine this
    buildConfigField "String", "ENVIRONMENT", "\"\""
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  signingConfigs {
    release {
      storeFile file(LE_STORE_FILE)
      storePassword LE_STORE_PASSWORD
      keyAlias LE_KEY_ALIAS
      keyPassword LE_KEY_PASSWORD
    }
  }

  buildTypes {
    debug {
      applicationIdSuffix '.debug'
      minifyEnabled false
      shrinkResources false
    }

    release {
      minifyEnabled true
      shrinkResources true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
      signingConfig signingConfigs.release
      ext.betaDistributionReleaseNotesFilePath='app/release_notes.txt'
      ext.betaDistributionEmailsFilePath='app/beta_distribution_emails.txt'
    }
  }

  lintOptions {
    abortOnError false
  }
}

dependencies {
  // Core
  compile 'com.android.support:appcompat-v7:21.0.3'
  compile 'com.google.android.gms:play-services-maps:6.5.87'
  compile 'com.google.android.gms:play-services-location:6.5.87'
  compile 'com.squareup.picasso:picasso:2.5.2'
  compile 'io.reactivex:rxjava:1.0.8'
  compile 'io.reactivex:rxandroid:0.24.0'
  compile 'com.jakewharton:butterknife:6.1.0'
  compile 'com.squareup.retrofit:retrofit:1.9.0'
  compile 'com.google.code.gson:gson:2.3.1'
  compile 'com.squareup.dagger:dagger:1.2.2'
  apt 'com.squareup.dagger:dagger-compiler:1.2.2'
  compile 'com.squareup.okhttp:okhttp:2.3.0'
  compile 'com.squareup.okhttp:okhttp-urlconnection:2.3.0'
  compile 'com.squareup:otto:1.3.6'
  compile 'com.cloudinary:cloudinary-android:1.1.3'
  // Analytics
  compile 'com.mixpanel.android:mixpanel-android:4.5.3@aar'
  compile('com.crashlytics.sdk.android:crashlytics:2.1.0@aar') {
    transitive = true;
  }
  // jars
  compile fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
  // Widgets
  compile 'com.etsy.android.grid:library:1.0.5'
  compile project(':paralloidviews')
  compile 'com.daimajia.numberprogressbar:library:1.2@aar'
  compile('de.keyboardsurfer.android.widget:crouton:1.8.5@aar')
  compile 'com.mcxiaoke.photoview:library:1.2.3'
  compile 'com.pnikosis:materialish-progress:1.2'
  compile 'com.hannesdorfmann.smoothprogressbar:library:1.0.0'
  compile 'com.github.traex.rippleeffect:library:1.2.4'
  compile 'com.melnykov:floatingactionbutton:1.2.0'
}

pmd {
  toolVersion = '5.1.3'
}

findbugs {
  toolVersion = "3.0.0"
}

task findbugs(type: FindBugs) {
  excludeFilter file('config/findbugs/exclude.xml')
  classes = fileTree('build/intermediates/classes/release')
  source = fileTree('src/main/java')
  classpath = files()
  effort = 'max'
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

task pmd(type: Pmd) {
  ruleSets = ["java-android",
              "java-basic",
              "java-braces",
              "java-strings",
              "java-unnecessary",
              "java-unusedcode",
              "java-sunsecure"]
  source = fileTree('src/main/java')
}

task findbugsWrapper(dependsOn: 'findbugs') {}
task pmdWrapper(dependsOn: 'pmd') {}

check.dependsOn findbugsWrapper
check.dependsOn pmdWrapper